<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="955" minHeight="600" backgroundColor="#EDEDED"
			   creationComplete="application_creationCompleteHandler(event)">
	<fx:Metadata>
		// Strings resource file
		[ResourceBundle("resources")]
	</fx:Metadata> 
	<fx:Style source="resources/css/styles.css.css"/>
	
	<fx:Script>
		<![CDATA[
			import flash.globalization.CurrencyFormatter;
			import flash.globalization.DateTimeFormatter;
			import flash.globalization.DateTimeStyle;
			import flash.globalization.LocaleID;
			
			import models.Wishlist;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			/* Initially set the preferred locale to use the user's default linguistic preferences, as specified in the
			user's operating system settings. For example, such preferences are typically set using the "Control Panel"
			for Windows, or the "System Preferences" in Mac OS X.
			*/
			[Bindable]
			public var preferredLocale: String = "en_US";//LocaleID.DEFAULT;
			
			[Bindable]
			public var localeIndex:Number = 0;
			
			/* Create a locale ID class.
			
			The LocaleID class provides methods for parsing and using locale ID names. This class supports locale ID
			names that use the syntax defined by the Unicode Technical Standard #35 (http://unicode.org/reports/tr35/).
			*/
			[Bindable]
			public var localeId:LocaleID;
			
			/* The DateTimeFormatter class provides locale-sensitive formatting for Date objects and access to localized
			date field names. The methods of this class use functions and settings provided by the operating system.
			There are two ways to select a date time format: using a predefined pattern or a custom pattern. For most
			applications the predefined styles specified by the DateTimeStyle constants (LONG, MEDIUM, NONE, or SHORT
			should be used. These constants specify the default patterns for the requested locale or the default patterns
			based on the user's operating system settings.
			
			When an instance of this class is created, if the requested locale is supported by the operating system then
			the properties of the instance are set according to the conventions and defaults of the requested locale and
			the constructor's dateStyle and timeStyle parameters. If the requested locale is not available, then the
			properties are set according to a fallback or default system locale, which can be retrieved using the
			actualLocaleIDName property.
			
			This class contains additional methods to get localized strings for month names and weekday names, and to
			retrieve the first day of the week that can be used in a calendar picker or other similar application.
			
			Due to the use of the user's settings, the use of formatting patterns provided by the operating system,
			and the use of a fallback locale when a requested locale is not supported, different users can see different
			formatting results even when using the same locale ID.
			*/
			[Bindable]
			public var dtLongFormatter: DateTimeFormatter;

			[Bindable]
			public var dtShortFormatter: DateTimeFormatter;

			/* The CurrencyFormatter class provides locale-sensitive formatting and parsing of currency values.
			
			The CurrencyFormatter class uses the data and functionality provided by the operating system and is designed
			to format currency values according to the conventions of a specific locale and type of currency. The position
			of the currency symbol, the negative symbol, the decimal separator, the grouping separator, the grouping
			pattern decimal separator, and other elements can vary depending on the locale.
			
			If the operating system supports the requested locale, the properties and currency type are set according to the
			conventions and defaults of the requested locale. If the requested locale is not available, then the properties
			are set according to a fallback or default system locale, which can be retrieved using the actualLocaleIDName
			property.
			
			Due to the use of the user's settings, the use of formatting patterns provided by the operating system, and the
			use of a fallback locale when a requested locale is not supported, different users can see different formatting
			results, even when using the same locale ID.
			*/
			[Bindable]
			public var currencyFormatter: CurrencyFormatter;
			
			[Bindable]
			public var acWishlists: ArrayCollection;
			
			[Bindalbe]
			public var selectedWishlist: Wishlist;
			
			//-----------------------------------------------------------------
			public function application_creationCompleteHandler(event:FlexEvent):void
			{
				// Create a new date/time formatter object based on the preferred locale.
				dtLongFormatter = new DateTimeFormatter(preferredLocale, DateTimeStyle.LONG, DateTimeStyle.NONE);
				dtShortFormatter = new DateTimeFormatter(preferredLocale, DateTimeStyle.SHORT, DateTimeStyle.NONE);
				
				// Create c currency formatter object based on the preferred locale.
				currencyFormatter = new CurrencyFormatter(preferredLocale);
				
				// Create a new locale ID object based on the locale name from the date time formatter
				localeId = new LocaleID(dtLongFormatter.actualLocaleIDName);
		
				// Set the language we'll load string from
				resourceManager.localeChain = [preferredLocale, "en_US"]; // en_US is a fallback locale here if language is not available
				
				getAllWishlists.send();
			}
			
			protected function getAllWishlists_resultHandler(event:ResultEvent):void
			{
				var wishlists: Array = JSON.parse(event.result.toString()) as Array;
				renderWishlistTiles(wishlists);
			}
			
			protected function renderWishlistTiles(wishlists: Array):void {
				this.acWishlists = new ArrayCollection();
				for each (var wishlistAsJson:Object in wishlists) {
					var wishlistTile: WishlistTile = new WishlistTile();
					var wishlist: Wishlist = new Wishlist(wishlistAsJson); 
					wishlistTile.wishlist = wishlist;
					acWishlists.addItem(wishlist);
				}			
			}
			
			protected function btnNewWishlist_clickHandler(event:MouseEvent):void
			{
				var createWishlistDialog: CreateWishlistDialog = new CreateWishlistDialog();
				PopUpManager.addPopUp(createWishlistDialog, this, true);
				PopUpManager.centerPopUp(createWishlistDialog);
			}
			
			protected function wishitemsGrid_clickHandler(event:MouseEvent):void
			{
				details.removeAllElements();
				var index:Number = event.currentTarget.selectedIndex;
				var wishlistTile: WishlistTile = new WishlistTile();
				selectedWishlist = acWishlists.getItemAt(index) as Wishlist;
				wishlistTile.wishlist = selectedWishlist;
				details.addElement(wishlistTile);
			}
			
			private function formatBuyDate(item:Object,column:GridColumn):String
			{
				return item.buyDateAsShortString;
			}
			
			protected function btnSettings_clickHandler(event:MouseEvent):void
			{
				var settingsDialog: SettingsDialog = new SettingsDialog();
				settingsDialog.localeIndex = localeIndex;
				PopUpManager.addPopUp(settingsDialog, this, true);
				PopUpManager.centerPopUp(settingsDialog);
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:HTTPService id="getAllWishlists" url="http://localhost/wishlists"
					   useProxy="false" method="GET" resultFormat="e4x"
					   result="getAllWishlists_resultHandler(event)">
		</s:HTTPService> 
	</fx:Declarations>
	<s:Scroller left="1" right="1" top="1" bottom="1">
		<s:Group width="100%">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center"/>
			</s:layout>
			<s:VGroup width="100%" horizontalAlign="center">
				<s:HGroup width="100%" height="200" paddingBottom="20" paddingLeft="20" paddingRight="20"
						  paddingTop="20" verticalAlign="middle">
					<s:Group>
						<s:Label x="2" y="2" color="#000000" fontFamily="Georgia" fontSize="60"
								 text="{resourceManager.getString('resources', 'appTitle')}"/>
						<s:Label color="#E4B204" fontFamily="Georgia" fontSize="60"
								 text="{resourceManager.getString('resources', 'appTitle')}"/>
					</s:Group>
					<s:Spacer width="50"/>
					<s:Image width="139" height="150" source="resources/images/coins.png"/>
					<s:Spacer width="100%"/>
					<s:Image id="btnSettings" source="resources/images/settings.png" width="50" height="50" click="btnSettings_clickHandler(event)"/>
				</s:HGroup>
				<s:HGroup width="100%" paddingBottom="20" paddingLeft="20" paddingRight="20" paddingTop="20"
						  verticalAlign="top">
					<!-- MASTER VIEW -->
					<s:VGroup id="master" width="30%" gap="3" horizontalAlign="center">
						<s:Group width="100%">
							<s:BorderContainer width="100%" cornerRadius="5" dropShadowVisible="true">
								<s:layout>
									<s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"/>
								</s:layout>
								<s:HGroup width="100%" verticalAlign="middle">
									<s:Label fontSize="20" fontWeight="bold" text="{resourceManager.getString('resources', 'wishlistTitle')}"/>
									<s:Button id="btnNewWishlist" label="{resourceManager.getString('resources', 'new')}" click="btnNewWishlist_clickHandler(event)"/>
								</s:HGroup>
								<s:DataGrid id="wishitemsGrid" width="100%"
											dataProvider="{acWishlists}"
											click="wishitemsGrid_clickHandler(event)">
									<s:columns>
										<s:ArrayList>
											<s:GridColumn dataField="name" headerText="{resourceManager.getString('resources', 'wishlistName')}"/>
											<s:GridColumn dataField="buyDate" headerText="{resourceManager.getString('resources', 'buyDate')}"
														  labelFunction="formatBuyDate"/>
										</s:ArrayList>
									</s:columns>
								</s:DataGrid>
							</s:BorderContainer>
						</s:Group>
					</s:VGroup>
					<!-- DETAILS VIEW -->
					<s:VGroup id="details" width="70%" horizontalAlign="center">
					</s:VGroup>
				</s:HGroup>
			</s:VGroup>
		</s:Group>
	</s:Scroller>
</s:Application>
